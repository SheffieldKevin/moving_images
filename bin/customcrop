#!/usr/bin/env ruby
# Copyright (c) 2015 Zukini Ltd.
# Please refer to the file LICENSE for the license agreement.
# You are granted the rights to modify this file for your own purposes
# or for distribution to third parties. In either case you accept all
# responsibility for liability. Please include the link to the documentation:
# https://gitlab.com/ktam/using-movingimages/wikis/UsingMovingImagesContents

# FILE: customcrop
# Crops images, each edge can be cropped by a specified amount.

require 'optparse'
require 'moving_images'
require 'pp'

include MovingImages

$verbose = false

def verboseputs(input)
  if $verbose
    puts input
  end
end

def clamp_to_range(val, min, max)
  if val < min
    val = min
  elsif val > max
    val = max
  end
  return val
end

def clamp_to_min(val, min)
  if val < min
    val = min
  end
  return val
end

class CustomCropCommand
  @@options = { }
  
  def self.missing_mandatory_options?()
    return @@options[:outputdir].nil?
  end

  #
  # Return a hash describing the options.
  # 
  def self.parse!(theArgs)
    @@options = MILibrary::Utility.make_customcrop_options()
    opt_parser = OptionParser.new do |opts|
      opts.version = "1.0"
      opts.banner = "Usage: customcrop [options] file1, file2, ..."
      opts.separator "Crop the image by specifying how much to crop from each "\
                     "edge independently."
      opts.separator "If the output directory is the same as the directory " +
                     "containing the original image files, then if permissions"
      opts.separator "allow the original images will be overwritten. If the " +
                     "output directory doesn't exist the " +
                     "output directory will be created."
      opts.separator ""
      opts.separator "Options:"

      opts.on("-l", "--left [LEFT]", Integer,
              "Crop LEFT pixels from left edge. Integer.") do |l|
        @@options[:left] = clamp_to_min(l, 0)
      end

      opts.on("-r", "--right [RIGHT]", Integer,
              "Crop RIGHT pixels from right edge. Integer") do |r|
        @@options[:right] = clamp_to_min(r, 0)
      end

      opts.on("-t", "--top [TOP]", Integer,
              "Crop TOP pixels from top edge. Integer") do |t|
        @@options[:top] = clamp_to_min(t, 0)
      end

      opts.on("-b", "--bottom [BOTTOM]", Integer,
            "Crop BOTTOM pixels from bottom edge. Integer") do |b|
        @@options[:bottom] = clamp_to_min(b, 0)
      end

      opts.on("-q", "--quality [QUALITY]", Float,
            "Export quality. 0.0 = max compression, min quality " +
            "1.0 = best quality min compression") do |qual|
        @@options[:quality] = clamp_to_range(qual, 0.0, 1.0)
      end

      opts.on("-t", "--exportfiletype [FILETYPE]",
              [:'public.jpeg', :'public.png', :'com.compuserve.gif',
               :'public.tiff', :'public.jpeg-2000', :'com.apple.icns',
               :'com.adobe.photoshop-image', :'com.apple.rjpeg' ],
               "The export file type. If not specified then the export "\
               "type will be set to the type of the first input file.\n"\
               "\t\t\t\t\t(public.jpeg, public.png, public.tiff, " \
               "com.compuserve.gif, public.jpeg-2000, com.apple.icns,\n"\
               "\t\t\t\t\tcom.adobe.photoshop-image, com.apple.rjpeg)") do |eft|
        @@options[:exportfiletype] = eft
      end

      opts.on("-m", "--copymetadata",
              "Copy metadata from the original image to the new image") do
        @@options[:copymetadata] = true
      end

      # Now get the directory where the scaled images are to be saved.
      opts.on("-o", "--outputdir PATH",
              "Directory where images to be saved.") do |od|
        @@options[:outputdir] = od
      end

      opts.on("--assumesamedimensions",
              "Assume all image files will have the same dimensions.") do
        @@options[:assume_images_have_same_dimensions] = true
      end

      # Now for options common to many command line scripts.
      opts.separator "Common options"

      opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
        @@options[:verbose] = v
      end

      # Add the help option at the end of the list of options.
      opts.on("-h", "--help", "Display this screen") do
        raise "Display help screen"
        exit
      end

      # Now add an example of using the command.
      opts.separator "Examples:"
      opts.separator "  customcrop --left 100 --right 100 " +
                     "--outputdir ~/Desktop/croppedimages --verbose " +
                     "--quality 0.8 " +
                     "file01.jpg file02.jpg file03.jpg file04.jpg file05.jpg"
      opts.separator "  customcrop --top 200 --bottom 300 " +
                     "--outputdir ~/Desktop/croppedimages --copymetadata " +
                     "~/Desktop/junkimages/*.jpg"
      
    end # parse!
    begin
      opt_parser.parse!(theArgs)
      if self.missing_mandatory_options?()
        raise "Missing mandatory options."
      end

      if @@options[:left].zero? && @@options[:right].zero? &&
         @@options[:top].zero? && @@options[:bottom].zero?
         raise "No cropping needed."
      end

    rescue RuntimeError => e
      puts e.message
      puts opt_parser
      exit 240
    end

    @@options
  end

  def self.customcrop()
    if ARGV.length < 1
      puts "No image files to process"
      exit(1)
    end

    unless File.exists?(File.expand_path(ARGV[0]))
      puts "Invalid file path: #{ARGV[0]}"
      exit(2)
    end

    begin
      start_time = Time.now
      verboseputs "Number of files to process: #{ARGV.size}"
      have_samedims = @@options[:assume_images_have_same_dimensions]
      expanded_filelist = []
      ARGV.each { |path| expanded_filelist.push(File.expand_path(path)) }
      process_imageslists=MILibrary::Utility.make_imagefilelists_forprocessing(
                              imagefilelist: expanded_filelist,
                              assume_images_have_same_dimensions: have_samedims,
                              maxlength_forprocessinglist: 50)

      verboseputs "Time to prepare processing: #{Time.now - start_time} sec"

      width_subtract = @@options[:left] + @@options[:right]
      height_subtract = @@options[:top] + @@options[:bottom]

      start_time = Time.now
      num_lists = process_imageslists.size
      @@options[:async] = num_lists > 1
      list_num = 0
      process_imageslists.each do |image_list|
        if process_imageslists.last.object_id.eql? image_list.object_id
          @@options[:async] = false
        end
        MILibrary.customcrop_files(@@options, image_list)
        verboseputs "Processed list #{list_num + 1} of #{num_lists}"
        list_num = list_num.succ
      end
      verboseputs "Time to process: #{Time.now - start_time} sec"

    rescue RuntimeError => e
      $errorcode = Smig.exitvalue
      unless $errorcode.zero?
        verboseputs "Exit string: " + Smig.exitstring
        verboseputs "Exit status: " + $errorcode.to_s
      end
      puts e.message
      puts e.backtrace.to_s
      exit 240
    end
    Smig.exitvalue
  end
end

def localmain()
  options = CustomCropCommand.parse!(ARGV)
  $verbose = options[:verbose]
  if $verbose
    puts JSON.pretty_generate(options)
  end

  result = CustomCropCommand.customcrop()
  if !result.zero?
    verboseputs("Error fail code: " + result.to_s)
  end
  result
end

result = localmain()
exit(result)
